version: '3'
services:
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    env_file:
      - .env
    ports:
      - 27017:27017
    volumes:
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   depends_on: 
  #     - mongo
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: root

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_NODE_PORT: 5672
    ports:
      - 5672:5672
      - 15672:15672

  # api:
  #   build: 
  #     context: .
  #     dockerfile: dockerfile-api
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./api:/usr/local/src/api
  #   ports:
  #     - 5000:5000
  #   stdin_open: true
  #   tty: true 
  #   command: sh -c "flask run -h 0.0.0.0"

  api_celery:
    container_name: api_celery
    build: 
      context: .
      dockerfile: dockerfile-api
    restart: always
    network_mode: "host"
    env_file:
      - .env
    volumes:
      - ./api:/usr/local/src/api
    stdin_open: true
    tty: true 
    command: sh -c "celery -A tasks.celery worker -E --autoscale=10,2 -l info -O fair -n chat_api@%n"
    depends_on: 
      - rabbitmq
      - mongo


  # elasticsearch:
  #   image: mdslino/elasticsearch:7.1.1
  #   container_name: chat-api-elasticsearch
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - esdata01:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  # kibana:
  #   container_name: chat-api-kibana
  #   image: docker.elastic.co/kibana/kibana:7.1.1
  #   environment:
  #     ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - 5601:5601

  # flower:
  #   container_name: flower
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile
  #   environment:
  #     ROOT_PATH_FOR_DYNACONF: /app/conf/
  #     ENV_FOR_DYNACONF: default
  #   command: sh -c "python ./scripts/wait_for_services.py && celery -A chat-api.tasks.app flower --port=5555"
  #   ports:
  #     - "5555:5555"

# volumes:
#   mongodbdata:
#     driver: local